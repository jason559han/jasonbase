<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.jason</groupId>
    <artifactId>jasonbase</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>jasonbase maven web</name>
    <packaging>war</packaging>


    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.0-alpha1</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>2.0.0-alpha1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.13.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
            <version>2.13.0</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.15.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.13.0</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>

        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>1.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.taglibs</groupId>
            <artifactId>taglibs-standard-impl</artifactId>
            <version>1.2.5</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp.jstl</groupId>
            <artifactId>jstl-api</artifactId>
            <version>1.2</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>servlet-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.servlet.jsp</groupId>
                    <artifactId>jsp-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jstl-impl</artifactId>
            <version>1.2</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>servlet-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.servlet.jsp</groupId>
                    <artifactId>jsp-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.servlet.jsp.jstl</groupId>
                    <artifactId>jstl-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.1.0.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>5.0.12.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.0.12.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.4.6</version>
        </dependency>
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper</artifactId>
            <version>4.1.5</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.18</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.62</version>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.4</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.21</version>
        </dependency>
    </dependencies>

    <properties>
        <file.encoding>UTF-8</file.encoding>
        <java.source.version>12</java.source.version>
        <java.target.version>12</java.target.version>
    </properties>

    <build>
        <!-- 产生的构件的文件名，默认值是${artifactId}-${version}。 -->
        <finalName>jasonbase</finalName>
        <!-- 构建产生的所有文件存放的目录,默认为${basedir}/target，即项目根目录下的target -->
        <directory>${basedir}/target</directory>
        <!--当项目没有规定目标（Maven2叫做阶段（phase））时的默认值， -->
        <!--必须跟命令行上的参数相同例如jar:jar，或者与某个阶段（phase）相同例如install、compile等 -->
        <defaultGoal>install</defaultGoal>
        <!--当filtering开关打开时，使用到的过滤器属性文件列表。 -->
        <!--项目配置信息中诸如${spring.version}之类的占位符会被属性文件中的实际值替换掉 -->
        <!--<filters>-->
            <!--<filter>../filter.properties</filter>-->
        <!--</filters>-->

        <!--项目相关的所有资源路径列表，例如和项目相关的配置文件、属性文件，这些资源被包含在最终的打包文件里。 -->
        <resources>
            <resource>
                <!--描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。 -->
                <!--举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。 -->
                <!--然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 -->
                <targetPath>resources</targetPath>
                <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 -->
                <!--<filtering>true</filtering>-->
                <!--描述存放资源的目录，该路径相对POM路径 -->
                <directory>src/main/resources</directory>
                <!--包含的模式列表 -->
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <!--排除的模式列表 如果<include>与<exclude>划定的范围存在冲突，以<exclude>为准 -->
                <excludes>
                    <exclude>jdbc.properties</exclude>
                </excludes>
            </resource>
        </resources>

        <!--单元测试相关的所有资源路径，配制方法与resources类似 -->
        <testResources>
            <testResource>
                <targetPath>resource</targetPath>
                <!--<filtering>true</filtering>-->
                <directory>src/test/resources</directory>
            </testResource>
        </testResources>

        <!--项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
        <sourceDirectory>${basedir}\src\main\java</sourceDirectory>

        <!--项目脚本源码目录，该目录和源码目录不同，绝大多数情况下，该目录下的内容会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 -->
        <!--<scriptSourceDirectory>${basedir}\src\main\scripts</scriptSourceDirectory>-->

        <!--项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
        <testSourceDirectory>${basedir}\src\test\java</testSourceDirectory>

        <!--被编译过的应用程序class文件存放的目录。 -->
        <outputDirectory>${basedir}\target\classes</outputDirectory>

        <!--被编译过的测试class文件存放的目录。 -->
        <testOutputDirectory>${basedir}\target\test-classes</testOutputDirectory>

        <!--项目的一系列构建扩展,它们是一系列build过程中要使用的产品，会包含在running bulid‘s classpath里面。 -->
        <!--他们可以开启extensions，也可以通过提供条件来激活plugins。 -->
        <!--简单来讲，extensions是在build过程被激活的产品 -->
        <!--<extensions>-->
            <!--例如，通常情况下，程序开发完成后部署到线上Linux服务器，可能需要经历打包、 -->
            <!--将包文件传到服务器、SSH连上服务器、敲命令启动程序等一系列繁琐的步骤。 -->
            <!--实际上这些步骤都可以通过Maven的一个插件 wagon-maven-plugin 来自动完成 -->
            <!--下面的扩展插件wagon-ssh用于通过SSH的方式连接远程服务器， -->
            <!--类似的还有支持ftp方式的wagon-ftp插件 -->
            <!--<extension>-->
                <!--<groupId>org.apache.maven.wagon</groupId>-->
                <!--<artifactId>wagon-ssh</artifactId>-->
                <!--<version>2.8</version>-->
            <!--</extension>-->
        <!--</extensions>-->

        <!--使用的插件列表 。 -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>7</source>
                    <target>7</target>
                </configuration>
<!--                <configuration>-->
<!--                    <source>7</source>-->
<!--                    <target>7</target>-->
<!--                    <showWarnings>true</showWarnings>-->
<!--                    &lt;!&ndash;<compilerArguments>   &ndash;&gt;-->
<!--                        &lt;!&ndash;<verbose />  &ndash;&gt;-->
<!--                        &lt;!&ndash;<bootclasspath>${java.home}b/rt.jar;${java.home}b/jce.jar</bootclasspath>  &ndash;&gt;-->
<!--                    &lt;!&ndash;</compilerArguments>   &ndash;&gt;-->
<!--                    <compilerArguments>-->
<!--                        <verbose />-->
<!--                        <bootclasspath>${java.home}b/rt.jar</bootclasspath>-->
<!--                    </compilerArguments>-->
<!--                </configuration>-->
            </plugin>
           <!--<plugin>
                <groupId></groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.5.5</version> -->
                <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->
                <!--<executions>
                    <execution> -->
                        <!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 -->
                        <!--<id>assembly</id>  -->
                        <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 -->
                        <!--<phase>package</phase> -->
                        <!--配置的执行目标 -->
                        <!--<goals>
                            <goal>single</goal>
                        </goals> -->
                        <!--配置是否被传播到子POM -->
                        <!--<inherited>false</inherited>
                    </execution>
                </executions> -->
                <!--作为DOM对象的配置,配置项因插件而异 -->
                <!--<configuration>
                    <finalName>${finalName}</finalName>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptor>assembly.xml</descriptor>
                </configuration> -->

                <!--是否从该插件下载Maven扩展（例如打包和类型处理器）， -->
                <!--由于性能原因，只有在真需要下载时，该元素才被设置成true。 -->
                <!--<extensions>false</extensions> -->

                <!--项目引入插件所需要的额外依赖 -->
                <!--<dependencies>
                    <dependency>...</dependency>
                </dependencies> -->
                <!--任何配置是否被传播到子项目 -->
                <!--<inherited>true</inherited>
            </plugin> -->
        </plugins>

        <!--主要定义插件的共同元素、扩展元素集合，类似于dependencyManagement， -->
        <!--所有继承于此项目的子项目都能使用。该插件配置项直到被引用时才会被解析或绑定到生命周期。 -->
        <!--给定插件的任何本地配置都会覆盖这里的配置 -->
        <!--<pluginManagement>
            <plugins>...</plugins>
        </pluginManagement> -->
    </build>
</project>